#!/bin/bash

APP="davos_charity_api"

BUILD_HOST="138.197.132.125"
BUILD_USER="deploy"
BUILD_AT="/tmp/edeliver/$APP/builds"

START_DEPLOY=true
CLEAN_DEPLOY=true

# prevent re-installing node modules; this defaults to "."
GIT_CLEAN_PATHS="_build rel priv/static"

PRODUCTION_HOSTS="138.197.132.125"
PRODUCTION_USER="deploy"
DELIVER_TO="/home/deploy/apps"

STAGING_HOSTS="138.197.171.3"
STAGING_USER="deploy"
DELIVER_TO="/home/deploy/apps"

# For Phoenix projects, symlink prod.secret.exs to our tmp source
pre_erlang_get_and_update_deps() {

if [[ "$DEPLOY_ENVIRONMENT" = "staging" ]]; then
  local _prod_secret_path="/home/deploy/apps/$APP/secret/staging.secret.exs"
  status "Linking '$_prod_secret_path'"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    mkdir -p '$BUILD_AT'
    ln -sfn '$_prod_secret_path' '$BUILD_AT/config/prod.secret.exs'
  "

elif [[ "$DEPLOY_ENVIRONMENT" = "production" ]]; then
  local _prod_secret_path="/home/deploy/apps/$APP/secret/prod.secret.exs"
  status "Linking '$_prod_secret_path'"
  __sync_remote "
    [ -f ~/.profile ] && source ~/.profile
    mkdir -p '$BUILD_AT'
    ln -sfn '$_prod_secret_path' '$BUILD_AT/config/prod.secret.exs'
  "
fi
}

pre_erlang_clean_compile() {
  status "Running yarn install"
    __sync_remote "
      [ -f ~/.profile ] && source ~/.profile
      set -e
      cd '$BUILD_AT'/assets
      yarn install
    "

  status "Compiling assets"
    __sync_remote "
      [ -f ~/.profile ] && source ~/.profile
      set -e
      cd '$BUILD_AT'/assets
      node_modules/.bin/webpack --mode production
    "

  status "Running phoenix.digest" # log output prepended with "----->"
  __sync_remote " # runs the commands on the build host
    [ -f ~/.profile ] && source ~/.profile # load profile (optional)
    set -e # fail if any command fails (recommended)
    cd '$BUILD_AT' # enter the build directory on the build host (required)
    # prepare something
    mkdir -p priv/static # required by the phoenix.digest task
    # run your custom task
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest $SILENCE
    APP='$APP' MIX_ENV='$TARGET_MIX_ENV' $MIX_CMD phx.digest.clean $SILENCE
  "
}
